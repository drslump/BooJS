namespace BooJs.Compiler.Steps

from Boo.Lang.Compiler.Ast import *
from Boo.Lang.Compiler.Steps import *


class AdaptParsingAst(AbstractTransformerCompilerStep):
""" Small modifications to the AST just after it's been generated by the parsing step
"""
    COMPILER_VERSION_PLACEHOLDER = '__COMPILER_VERSION__'

    override def Run():
        if len(Errors) > 0:
            return
        Visit CompileUnit

    override def OnGenericTypeReference(node as GenericTypeReference):
        # HACK: Replace references to IEnumerable for our Iterable interface. Boo's parser
        #       defines <type>* as a generic type reference to IEnumerable.
        if node.Name == 'System.Collections.Generic.IEnumerable':
            node.Name = 'BooJs.Lang.Globals.Iterable'

    override def OnReferenceExpression(node as ReferenceExpression):
    """ Inject the compiler version where the placeholder is found.
    """
        if node.Name == COMPILER_VERSION_PLACEHOLDER:
            ReplaceCurrentNode StringLiteralExpression(BooVersion.ToString())