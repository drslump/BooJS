namespace BooJs.Compiler.Steps

import Boo.Lang.Compiler.Ast
import Boo.Lang.Compiler.Steps


class AdaptParsingAst(AbstractTransformerCompilerStep):
""" Small modifications to the AST just after it's been generated by the parsing step
"""

    override def Run():
        if len(Errors) > 0:
            return
        Visit CompileUnit

    override def OnGenericTypeReference(node as GenericTypeReference):
        # HACK: Replace references to IEnumerable for our Iterable interface. Boo's parser
        #       defines <type>* as a generic type reference to IEnumerable.
        if node.Name == 'System.Collections.Generic.IEnumerable':
            node.Name = 'BooJs.Lang.Globals.Iterable'

    override def OnStringLiteralExpression(node as StringLiteralExpression):
        # Convert backquoted literals to eval expressions
        if node.ContainsAnnotation('quote') and node['quote'] == '`':
            ReplaceCurrentNode [| eval($node) |]
